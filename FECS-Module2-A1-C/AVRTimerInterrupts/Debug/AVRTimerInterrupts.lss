
AVRTimerInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000653  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000591  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000159f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
//#define F_CPU 1234567UL    // used for delay call
volatile unsigned char flag1, flag2;   // defined as volatile because variable shared by ISR and main

int main(void)
{
	flag1 = 0;   // initialize flag1 with 0
  7c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag1>
	flag2 = 0;   // initialize flag2 with 0
  80:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	DDRB |= (1<<3); // PB3 as output
  84:	bb 9a       	sbi	0x17, 3	; 23
	DDRD = 0xFF;    // port D as output
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	81 bb       	out	0x11, r24	; 17
	
	TCNT0 = -125; // load timer0 with -125 
  8a:	83 e8       	ldi	r24, 0x83	; 131
  8c:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS02) | (1<<CS00);  // Timer0, normal mode, /1024 pre scalar 
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	83 bf       	out	0x33, r24	; 51
	
	TCNT1 = -6250; // load timer1 with -6250
  92:	26 e9       	ldi	r18, 0x96	; 150
  94:	37 ee       	ldi	r19, 0xE7	; 231
  96:	3d bd       	out	0x2d, r19	; 45
  98:	2c bd       	out	0x2c, r18	; 44
	TCCR1A = 0x00;     // normal mode
  9a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x05;     // internal clock, pre scalar 1024
  9c:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK = (1<<TOIE0)|(1<<TOIE1); // enable timer 0 and 1 interrupts
  9e:	89 bf       	out	0x39, r24	; 57
	sei();
  a0:	78 94       	sei
			
			flag1 = 0, flag2 = 0;   // setting back flags to 0
		}
		else
		{
			PORTD = 0x11;    // output 0x11 to port D
  a2:	91 e1       	ldi	r25, 0x11	; 17
	
	while (1)      // run program for infinite
	{
		if(flag1==1 && flag2 == 1)   // check if both the interrupts coincide
		{
			PORTB ^= (1<<3);    // toggle PB3
  a4:	38 e0       	ldi	r19, 0x08	; 8
				
			_delay_ms(10);     // 10ms delay
			
			PORTD = 0x22;      // output 0x22 in port D
  a6:	22 e2       	ldi	r18, 0x22	; 34
	TIMSK = (1<<TOIE0)|(1<<TOIE1); // enable timer 0 and 1 interrupts
	sei();
	
	while (1)      // run program for infinite
	{
		if(flag1==1 && flag2 == 1)   // check if both the interrupts coincide
  a8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag1>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	99 f4       	brne	.+38     	; 0xd6 <main+0x5a>
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	79 f4       	brne	.+30     	; 0xd6 <main+0x5a>
		{
			PORTB ^= (1<<3);    // toggle PB3
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	83 27       	eor	r24, r19
  bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	e3 ec       	ldi	r30, 0xC3	; 195
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x46>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x4c>
  c8:	00 00       	nop
				
			_delay_ms(10);     // 10ms delay
			
			PORTD = 0x22;      // output 0x22 in port D
  ca:	22 bb       	out	0x12, r18	; 18
			
			flag1 = 0, flag2 = 0;   // setting back flags to 0
  cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag1>
  d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x5c>
		}
		else
		{
			PORTD = 0x11;    // output 0x11 to port D
  d6:	92 bb       	out	0x12, r25	; 18
		}
		flag1 = 0, flag2 = 0;    // setting back flags to 0
  d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag1>
  dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
  e0:	e3 cf       	rjmp	.-58     	; 0xa8 <main+0x2c>

000000e2 <__vector_9>:
	
}
ISR(TIMER1_OVF_vect)    // interrupt service routine for timer 1
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
	TCNT1H = (-25000)>>8;     // the high byte
  ee:	8e e9       	ldi	r24, 0x9E	; 158
  f0:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = (-25000) & 0xFF;  // overflow after 25000 clocks	
  f2:	88 e5       	ldi	r24, 0x58	; 88
  f4:	8c bd       	out	0x2c, r24	; 44
	flag1 = 1;      // set flag1 to 1 on interrupt
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag1>
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_11>:

ISR(TIMER0_OVF_vect)   // interrupt service routine for timer0
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
	TCNT0 = -125; // load timer0 with -125 
 114:	83 e8       	ldi	r24, 0x83	; 131
 116:	82 bf       	out	0x32, r24	; 50
	flag2 = 1;    // set flag2 to 1 on interrupt
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
